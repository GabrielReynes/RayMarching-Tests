// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ray
{
    float3 origin;
    float3 direction;
};

struct object
{
    float4x4 inverse_local;
    float4 col;
    int3 rep;
    float freq;
};

struct sphere
{
    object object;
    float size;
};

struct box
{
    object object;
    float3 size;
    float rounding_radius;
};

const float3 light_dir;
const float4 light_col, background_col;

float4x4 camera_to_world;
float4x4 camera_inverse_projection;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result;
int sphere_count, cube_count;
StructuredBuffer<sphere> spheres;
StructuredBuffer<box> cubes;

ray create_ray(const float3 origin, const float3 direction)
{
    ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

ray create_camera_ray(float2 uv)
{
    const float3 origin = mul(camera_to_world, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(camera_inverse_projection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(camera_to_world, float4(direction, 0.0f)).xyz;
    return create_ray(origin, normalize(direction));
}

inline float3 opTx( in float3 p, in float4x4 t)
{
    return mul(t, float4(p, 1.0f)).xyz;
}

float3 opRepLim( in float3 p, in float c, in float3 l)
{
    return p - c * clamp(round(p/c), -l, l);
}

float4 opElongate( in float3 p, in float3 h )
{
    float3 q = abs(p)-h;
    return float4(max(q,0.0), min(max(q.x,max(q.y,q.z)), 0.0));
}

inline float sdPlane(const float3 p)
{
    return p.y;
}

float sdSphere(const float3 p, const float s )
{
    return length(p) - s;
}

float sdBox(float3 p, float3 b)
{
    float3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

inline float3 transformObject(const float3 pos, object object)
{
    return opRepLim(opTx(pos, object.inverse_local), object.freq, object.rep);
}

float min_dist(float3 pos, out float4 col)
{
    float d = 1.#INF;
    for (int s = 0; s < sphere_count; ++s)
    {
        const float3 tx = transformObject(pos, spheres[s].object);
        const float aux = sdSphere(tx, spheres[s].size);
        if (aux < d) {d = aux; col = spheres[s].object.col;}
    }
    for (int c = 0; c < cube_count; ++c)
    {
        const float3 tx = transformObject(pos, cubes[c].object);
        const float aux = sdBox(tx, cubes[c].size) - cubes[c].rounding_radius;
        if (aux < d) {d = aux; col = cubes[c].object.col;}
    }

    const float ground = sdPlane(pos);
    if (ground < d) {d = ground; col = float4(0.1,0.1,0.1,1);}
    
    return d;
}

float3 calc_normal(float3 pos, out float4 col)
{
    float2 e = float2(1.0, -1.0);
    const float eps = 5e-4;
    return normalize( e.xyy * min_dist(pos + e.xyy*eps, col) + 
                      e.yyx * min_dist(pos + e.yyx*eps, col) + 
                      e.yxy * min_dist(pos + e.yxy*eps, col) + 
                      e.xxx * min_dist(pos + e.xxx*eps, col));
}

float soft_shadow( in float3 ro, in float3 rd, float mint, float maxt, float k)
{
    float res = 1.0;
    float t = mint, ph = 1e20;
    for ( int i=0; i<16; i++ )
    {
        float4 garbage;
        const float h = min_dist(ro + rd*t, garbage);
        if(h < 5e-4*t) return 0.0;
        if(t > maxt) return 1.0;
        float y = h*h/(2.0*ph);
        float d = sqrt(h*h-y*y);
        res = min( res, k*d/max(0.0,t-y) );
        ph = h;
        t += h;
    }
    return res;
}

float cast_ray( in float3 ro, in float3 rd , in float tmax, out float4 col)
{
    const float tmin = 1.0;
   
    // bounding volume
    // const float tp1 = (0.0-ro.y)/rd.y;
    // if( tp1>0.0 ) tmax = min( tmax, tp1 );
    // const float tp2 = (1.0-ro.y)/rd.y;
    // if( tp2>0.0 ) {
    //     if( ro.y>1.0 ) tmin = max( tmin, tp2 );
    //     else           tmax = min( tmax, tp2 );
    // }
    
    float t = tmin;
    for( int i=0; i<64; i++ )
    {
        const float precis = 5e-4*t;
        const float res = min_dist(ro+rd*t , col);
        if( res<precis || t>tmax ) break;
        t += res;
    }
    return t;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    result.GetDimensions(width, height);

    const float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    const ray ray = create_camera_ray(uv);
    const float dist_max = 2e2;

    float4 col;
    const float dist = cast_ray(ray.origin, ray.direction, dist_max, col);
    
    if (dist < dist_max)
    {
        const float3 pos = ray.origin + dist * ray.direction;
        const float3 nor = calc_normal(pos, col);
    
        const float dif = clamp(dot(nor, -light_dir), 0.0, 1.0)
            * soft_shadow(pos, -light_dir, 1.0, 5e1, 32);
        const float amb = (dot(nor, float3(0, 1, 0)) + 1) / 2;

        const float4 final = sqrt(col*amb + dif*light_col);

        result[id.xy] = final;
    }
    else
    {
        result[id.xy] = background_col;
    }
}
